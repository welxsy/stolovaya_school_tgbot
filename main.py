import pyodbc
import os
import re
import asyncio
import openpyxl
from openpyxl.styles import Font
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import nest_asyncio
from datetime import datetime, timedelta
import logging


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

nest_asyncio.apply()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = pyodbc.connect(
    "DRIVER={SQL Server};"
    "SERVER=localhost\\SQLEXPRESS;"
    "DATABASE=School12db;"
    "Trusted_Connection=yes;"
)
cursor = conn.cursor()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_selected_students = {}
BASE_FOLDER = "C:\\Users\\ASUS\\PycharmProjects\\–µ–ø\\user_files"


def delete_old_user_files(user_id: int, base_folder: str, days_old: int = 7):
    user_folder = os.path.join(base_folder, str(user_id))
    date_pattern = re.compile(r'\d{1,2}[–ê-–Ø–∞-—è_]*_(\d{4})-(\d{2})-(\d{2})')
    today = datetime.today()
    deleted_files = []
    files_in_folder = os.listdir(user_folder)
    logger.info(f"–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {files_in_folder}")

    for filename in files_in_folder:
        match = date_pattern.search(filename)
        if match:
            year, month, day = map(int, match.groups())
            file_date = datetime(year, month, day)
            if today - file_date > timedelta(days=days_old):
                file_path = os.path.join(user_folder, filename)
                os.remove(file_path)
                deleted_files.append(filename)
                logger.info(f"–§–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω.")
    if deleted_files:
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã: {', '.join(deleted_files)}")
    else:
        logger.info(f"–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    return deleted_files


async def view_previous_lists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    folder_path = f"user_files/{user_id}"

    if not os.path.exists(folder_path) or not os.listdir(folder_path):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.")
        return

    files = os.listdir(folder_path)
    keyboard = [
        [InlineKeyboardButton(file, callback_data=f"view_file|{file}")] for file in files
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=reply_markup)


def create_user_folder(user_id):
    folder_path = f"user_files/{user_id}"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    return folder_path


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel
def create_excel(class_name, students_list, user_id):
    folder_path = create_user_folder(user_id)
    today_date = datetime.now().strftime("%Y-%m-%d")

    for file in os.listdir(folder_path):
        if file.startswith(f"{class_name}_{today_date}"):
            os.remove(os.path.join(folder_path, file))

    wb = openpyxl.Workbook()
    ws = wb.active
    headers = ["–§–∞–º–∏–ª–∏—è —É—á–µ–Ω–∏–∫–∞", "–ò–º—è —É—á–µ–Ω–∏–∫–∞"]
    ws.append(headers)

    for cell in ws[1]:
        cell.font = Font(bold=True)

    ws.column_dimensions["A"].width = 20
    ws.column_dimensions["B"].width = 20

    for student in students_list:
        ws.append([student["LastName"], student["FirstName"]])

    ws.append(["–ò—Ç–æ–≥–æ", len(students_list)])

    file_name = f"{class_name}_{today_date}.xlsx"
    file_path = os.path.join(folder_path, file_name)
    wb.save(file_path)
    return file_path


async def send_selected_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    file_name = query.data.split("|")[1]

    user_id = query.from_user.id
    folder_path = f"user_files/{user_id}"
    file_path = os.path.join(folder_path, file_name)

    if not os.path.exists(file_path):
        await query.message.reply_text("‚ùå –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        wb = openpyxl.load_workbook(file_path)
        ws = wb.active

        students = []
        for row in ws.iter_rows(min_row=2, max_col=2, values_only=True):
            last_name, first_name = row
            if last_name is None or first_name is None:
                continue
            if last_name == "–ò—Ç–æ–≥–æ":
                continue
            students.append({"LastName": last_name, "FirstName": first_name})

        if not students:
            await query.message.reply_text("‚ùå –í —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
            return

        class_name, date_part = file_name.replace(".xlsx", "").split("_", 1)
        context.user_data["selected_class_name"] = class_name
        user_selected_students[user_id] = students

        student_text = "\n".join([f"- {s['LastName']} {s['FirstName']}" for s in students])
        message_text = f"üìã **–ö–ª–∞—Å—Å:** {class_name}\nüìÖ **–î–∞—Ç–∞:** {date_part}\n\n**–£—á–µ–Ω–∏–∫–∏:**\n{student_text}"
        await query.message.reply_text(message_text, parse_mode="Markdown")
        keyboard = [["‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –°–ü–ò–°–û–ö", "üíæ –°–û–•–†–ê–ù–ò–¢–¨ –ò –û–¢–ü–†–ê–í–ò–¢–¨ –°–ü–ò–°–û–ö"], ["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—ã–π.",
                                       reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞.")


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.full_name
    logger.info(f"Start command received from {user_name} (ID: {user_id})")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
    deleted_files = delete_old_user_files(user_id, BASE_FOLDER, days_old=7)
    if deleted_files:
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}): {', '.join(deleted_files)}")

    keyboard = [["üìã –ú–ï–ù–Æ"], ["‚ÑπÔ∏è–ò–ù–°–¢–†–£–ö–¶–ò–Ø"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.full_name
    logger.info(f"Menu command received from {user_name} (ID: {update.message.from_user.id})")

    keyboard = [["üìú –°–û–ó–î–ê–¢–¨ –°–ü–ò–°–û–ö"], ["üìÇ –ü–†–û–®–õ–´–ï –°–ü–ò–°–ö–ò"], ["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.full_name
    logger.info(f"Info command received from {user_name} (ID: {update.message.from_user.id})")

    await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤!!!"
                                    "\n\n"
                                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
                                    "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤.\n"
                                    "‚Ä¢ –ü—Ä–æ—à–ª—ã–µ —Å–ø–∏—Å–∫–∏ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏.\n"
                                    "‚Ä¢ –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é.\n"
                                    "\n"
                                    "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:\n"
                                    "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏ –¥–æ–±–∞–≤—å—Ç–µ —É—á–µ–Ω–∏–∫–æ–≤.\n"
                                    "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤) –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel.\n"
                                    "\n"
                                    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
                                    "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
                                    "\n"
                                    "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ä—ã—Ö —Å–ø–∏—Å–∫–æ–≤:\n"
                                    "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ü—Ä–æ—à–ª—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º.\n"
                                    "\n"
                                    "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –≤ —Å–ø–∏—Å–æ–∫, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.'"
                                    "\n\n"
                                    "!!!!! –î–õ–Ø –¢–û–ì–û –ß–¢–û–ë–´ –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –£–ñ–ï –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö, –ü–†–û–°–¢–û –°–û–ó–î–ê–ô–¢–ï –ù–û–í–´–ô. –û–¢–ü–†–ê–í–õ–ï–ù –ë–£–î–ï–¢ –ü–û–°–õ–ï–î–ù–ò–ô –°–û–ó–î–ê–ù–ù–´–ô –°–ü–ò–°–û–ö.")


# –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
async def choose_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT ClassID, ClassName FROM Classes")
    classes = cursor.fetchall()

    keyboard = [
        [InlineKeyboardButton(c.ClassName, callback_data=f"class_{c.ClassID}")] for c in classes
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=reply_markup)


async def send_students_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    class_id = query.data.split("_")[1]

    cursor.execute("SELECT ClassName FROM Classes WHERE ClassID=?", class_id)
    class_name = cursor.fetchone()[0]
    context.user_data["selected_class_name"] = class_name

    cursor.execute("SELECT LastName, FirstName FROM Students WHERE ClassID=?", class_id)
    students = cursor.fetchall()
    if not students:
        await query.message.reply_text("‚ùå –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    user_id = query.from_user.id
    user_selected_students[user_id] = []

    keyboard = [
        [InlineKeyboardButton(f"{s[0]} {s[1]}", callback_data=f"student_{s[0]}_{s[1]}")] for s in students
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: {class_name}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–æ–≤:",
                                   reply_markup=reply_markup)

    action_keyboard = ReplyKeyboardMarkup(
        [["üìÑ –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –¢–ï–ö–£–©–ò–ô –°–ü–ò–°–û–ö"], ["üíæ –°–û–•–†–ê–ù–ò–¢–¨ –ò –û–¢–ü–†–ê–í–ò–¢–¨ –°–ü–ò–°–û–ö"], ["‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –°–ü–ò–°–û–ö"], ["üîô –ù–∞–∑–∞–¥"]],
        resize_keyboard=True)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
async def student_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    selected_student = query.data.split("_")[1:]
    if user_id not in user_selected_students:
        user_selected_students[user_id] = []
    student = {"LastName": selected_student[0], "FirstName": selected_student[1]}
    if student not in user_selected_students[user_id]:
        user_selected_students[user_id].append(student)

    user_name = query.from_user.full_name
    logger.info(f"Student {selected_student[0]} {selected_student[1]} selected by {user_name} (ID: {user_id})")

    await query.message.reply_text(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —É—á–µ–Ω–∏–∫–∞: {selected_student[0]} {selected_student[1]}")


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
async def view_current_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_selected_students or not user_selected_students[user_id]:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    student_list = "\n".join([f"{s['LastName']} {s['FirstName']}" for s in user_selected_students[user_id]])
    await update.message.reply_text(f"üìÑ –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n{student_list}")


async def edit_student_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="edit_add_student")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="edit_remove_student")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º?", reply_markup=reply_markup)


async def handle_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "edit_add_student":
        class_name = context.user_data.get("selected_class_name")
        if not class_name:
            await query.message.reply_text("‚ùå –ö–ª–∞—Å—Å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return

        cursor.execute("SELECT ClassID FROM Classes WHERE ClassName=?", class_name)
        result = cursor.fetchone()
        if result:
            class_id = result[0]


            cursor.execute("SELECT LastName, FirstName FROM Students WHERE ClassID=?", class_id)
            students = cursor.fetchall()

            if not students:
                await query.message.reply_text("‚ùå –í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
                return

            keyboard = [
                [InlineKeyboardButton(f"{s[0]} {s[1]}", callback_data=f"student_{s[0]}_{s[1]}")] for s in students
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å {class_name}:",
                                           reply_markup=reply_markup)
    elif action == "edit_remove_student":
        user_id = query.from_user.id
        if user_id not in user_selected_students or not user_selected_students[user_id]:
            await query.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return

        student_list = user_selected_students[user_id]
        keyboard = [
            [InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {s['LastName']} {s['FirstName']}",
                                  callback_data=f"remove_student_{s['LastName']}_{s['FirstName']}")]
            for s in student_list
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)


async def remove_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    student_list = user_selected_students.get(user_id, [])
    if not student_list:
        await query.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ–∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return

    student_to_remove = query.data.split("_")[2:]
    student_to_remove = {"LastName": student_to_remove[0], "FirstName": student_to_remove[1]}

    if student_to_remove in student_list:
        student_list.remove(student_to_remove)
        user_selected_students[user_id] = student_list
        total_students = len(student_list)
        student_list.append({"LastName": "–ò—Ç–æ–≥–æ", "FirstName": total_students})

        await query.message.reply_text(
            f"–£—á–µ–Ω–∏–∫ {student_to_remove['LastName']} {student_to_remove['FirstName']} —É–¥–∞–ª–µ–Ω.")
    else:
        await query.message.reply_text("‚ùå –≠—Ç–æ—Ç —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")


async def generate_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_selected_students or not user_selected_students[user_id]:
        await update.message.reply_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —É—á–µ–Ω–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞.")
        return

    class_name = context.user_data.get("selected_class_name")
    file_path = create_excel(class_name, user_selected_students[user_id], user_id)
    with open(file_path, "rb") as file:
        await update.message.reply_document(document=file)

    admin_chat_id = 6129878481
    with open(file_path, "rb") as file:
        await update.message._bot.send_document(chat_id=admin_chat_id, document=file)

    user_selected_students[user_id] = []


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def log_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.full_name
    logger.info(f"Message received from {user_name} (ID: {update.message.from_user.id}): {update.message.text}")

    text = update.message.text
    if text == "üìã –ú–ï–ù–Æ":
        await menu(update, context)
    elif text == "üìú –°–û–ó–î–ê–¢–¨ –°–ü–ò–°–û–ö":
        await choose_class(update, context)
    elif text == "‚ÑπÔ∏è–ò–ù–°–¢–†–£–ö–¶–ò–Ø":
        await info(update, context)
    elif text == "üìÑ –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –¢–ï–ö–£–©–ò–ô –°–ü–ò–°–û–ö":
        await view_current_list(update, context)
    elif text == "üíæ –°–û–•–†–ê–ù–ò–¢–¨ –ò –û–¢–ü–†–ê–í–ò–¢–¨ –°–ü–ò–°–û–ö":
        await generate_excel(update, context)
    elif text == "‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –°–ü–ò–°–û–ö":
        await edit_student_list(update, context)
    elif text == "üìÇ –ü–†–û–®–õ–´–ï –°–ü–ò–°–ö–ò":
        await view_previous_lists(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)



async def main():
    app = ApplicationBuilder().token("7472359286:AAHVC0ibd9FenDWSMoesj7YCydR4VbC_NIA").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_messages))
    app.add_handler(CallbackQueryHandler(send_students_buttons, pattern="^class_"))
    app.add_handler(CallbackQueryHandler(student_selected, pattern="^student_"))
    app.add_handler(CallbackQueryHandler(remove_student, pattern="^remove_student_"))
    app.add_handler(CallbackQueryHandler(handle_edit_menu, pattern="^edit_"))
    app.add_handler(CallbackQueryHandler(send_selected_file, pattern="^view_file\\|"))

    await app.run_polling()


if __name__ == '__main__':
    asyncio.run(main())